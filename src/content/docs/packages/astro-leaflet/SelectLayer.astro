---
// Copyright (c) Pascal Brand
// MIT License

import { Leaflet } from "astro-leaflet";

const layerNames = {
  'OSM': [
    'OSM',
  ],
  'Google': [
    'Google&type=satellite',
    'Google&type=street',
    'Google&type=hybrid',
    'Google&type=terrain',
  ],
  'Michelin': [
    'Michelin&type=map',
    'Michelin&type=label',
  ],
}

---


  <div class="select-layer-grid">
    <form class="select-layer-main-layers">
      {
        Object.keys(layerNames).map((name, index) => (
              <label class='select-layer-label' for={name}>
                <input type="radio" name="mainLayers" id={name} value={name} checked={index===0} />
                {name}
              </label>
          )
        )
      }
    </form>

    <form class="select-layer-layer-names">
      {
        Object.keys(layerNames).map((name) => {
          return (layerNames[name as keyof typeof layerNames] as string[]).map((layername) => (
              <label class='select-layer-label' for={layername}>
                <input type="radio" name="layername" id={layername} value={layername}} />
                {layername}
              </label>
          ))
        })
      }
    </form>
  </div>

  <Leaflet id='astro-leaflet-select' options={{
      center: [38.3709404,-97.6649989],
      zoom: 4,
      mapOptions: {
        zoomControl: false,
      }
    }}
  />


<style is:global>
  .select-layer-grid {
    display: grid;
    grid-template-columns: 1fr 3fr;
    gap: 8px;
  }

  .select-layer-main-layers, .select-layer-layer-names {
    height: 30vh;
    overflow-y: scroll;
    font-size: 10px;
  }

  .select-layer-label {
    display: block;
  }
  .select-layer-label:hover {
    font-weight: 900;
  }
  .select-layer-label:has(input:checked) {
    background-color: lightgray;
    font-weight: 900;
  }

  .select-layer-not-visible {
    display: none;
  }

  .select-layer-grid input {
    display: none;
  }

  .box {
    position: absolute;
    top: 0px;
    left: 0px%;
    z-index: 401;
    /* text-align: center; */
    width: 150px;
    height: 50vh;
    background-color:red;
    overflow: scroll;
    font-size: 10px;
  }
</style>

<script>
  import L from "leaflet"
  import type { Map } from "leaflet"
	import { getMapFromId, getLayerOptionsFromName, type LayerNamesType } from "astro-leaflet"

  const mainLayersRadios = document.querySelectorAll('input[name="mainLayers"]') as NodeListOf<HTMLInputElement>
  const layernameRadios = document.querySelectorAll('input[name="layername"]') as NodeListOf<HTMLInputElement>
  let map: Map | undefined = undefined

	window.onload = function() {
		map = getMapFromId('astro-leaflet-select')
    if (map) {
      L.control.zoom({
        position: 'bottomright'
      }).addTo(map);
    }

    // select Google&type=hybrid
    mainLayersRadios.forEach((radio: HTMLInputElement) => {
      if (radio.value === 'Google') {
        select(radio)
      }
    })
    layernameRadios.forEach((radio: HTMLInputElement) => {
      if (radio.value === 'Google&type=hybrid') {
        select(radio)
      }
    })
	}

  mainLayersRadios.forEach((radio: HTMLInputElement) => {
    radio.addEventListener('change', () => {
      let firstFound = false
      layernameRadios.forEach(layernameRadio => {
        if (layernameRadio.value.startsWith(radio.value)) {
          // layernameRadio.parentElement!.style = 'display: unset;'
          layernameRadio.parentElement!.classList.remove("select-layer-not-visible");
          if (!firstFound) {
            select(layernameRadio)
            firstFound = true
          }
        } else {
          layernameRadio.parentElement!.classList.add("select-layer-not-visible");
        }
      })

      // console.log(`${radio.value} changed`);
    })
  })


  layernameRadios.forEach((radio: HTMLInputElement) => {
    radio.addEventListener('change', () => {
      if (map) {
        map.eachLayer(function (layer) {
          map!.removeLayer(layer);
        });

        let layerFromName = getLayerOptionsFromName(radio.value as LayerNamesType)
        const newLayer = L.tileLayer(layerFromName.tileLayer, layerFromName.options);
        map.addLayer(newLayer)

        // console.log(`${radio.value} changed`);
        // console.log(`layer = ${layerFromName.tileLayer}`);
      }
    })
  });

  // select Google&type=hybrid by default
  function select(radio: HTMLInputElement) {
    let change = new Event('change');
    radio.checked = true
    radio.dispatchEvent(change);
  }


</script>
